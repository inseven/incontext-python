#!/usr/bin/env python3

import logging
import os
import subprocess
import sys

ROOT = os.path.dirname(os.path.abspath(__file__))
DOCKER_FILE = os.path.join(ROOT, "docker/Dockerfile")


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


def main():
    args = sys.argv[1:]

    # TODO: Wait for docker to start up to handle situations where we've been launched before docker is running (e.g. system startup).

    # Check to see if we've been asked to build the docker image.
    # TODO: Auto-detect if the dependencies have changed and rebuild the docker image for us.
    if args == ["compile"]:
        subprocess.check_call(["docker", "build",
                               "-t", "incontext-docker",
                               "-f", DOCKER_FILE,
                               ROOT])
        exit()

    # Iterate over the arguments determining which ones map to files or directories on the file system.
    # These will be mounted as volumes when running Docker Compose to ensure the instance of incontext running
    # in the container has access to the necessary files.
    # Passing a path on the command line is treated as granting implicit access to the container.
    volumes = []
    for arg in args:
        if not os.path.exists(arg):
            continue
        volume = os.path.abspath(arg)
        volumes.extend(["--volume", f"{volume}:{volume}"])
    command = (["docker", "run",
                "--user", f"{os.getuid()}:{os.getgid()}",
                "--volume", f"{ROOT}:/usr/local/src/incontext"] +
               volumes +
               ["incontext-docker", "python3", "/usr/local/src/incontext/incontext.py"] +
               args)
    logging.debug("Running command %s.", command)
    subprocess.run(command)


if __name__ == "__main__":
    main()
