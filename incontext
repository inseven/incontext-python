#!/usr/bin/env python3
#
# Copyright (c) 2016-2020 InSeven Limited
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import hashlib
import logging
import os
import subprocess
import sys
import time

ROOT = os.path.dirname(os.path.abspath(__file__))
DOCKER_DIRECTORY = os.path.join(ROOT, "docker")

DOCKERFILE = os.path.join(DOCKER_DIRECTORY, "Dockerfile")

DOCKER_IMAGE_NAME = "incontext-docker"


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


def get_files(path):
    result = []
    for root, dirs, files in os.walk(path):
        result.extend(files)
    return result


def get_directory_sha(path):
    hash = hashlib.sha256()
    for f in sorted(get_files(path)):
        hash.update(f.encode("utf-8"))
        with open(os.path.join(path, f), 'rb') as fh:
            hash.update(fh.read())
    return hash.hexdigest()


def unique_prefixes(paths):
    previous = None
    for path in sorted(paths):
        if previous is not None and path.startswith(previous):
            continue
        previous = path
        yield previous


def filter_paths(items):
    return [os.path.abspath(item) for item in items if os.path.exists(item)]


def main():
    args = sys.argv[1:]

    # Wait for docker to start up to handle situations where we've been launched before docker is running (e.g. system startup).
    waiting = False
    while True:
        try:
            subprocess.check_output(["docker", "stats", "--no-stream"], stderr=subprocess.STDOUT)
            break
        except subprocess.CalledProcessError:
            if not waiting:
                waiting = True
                logging.info("Waiting for docker...")
            time.sleep(2)

    # Check to see if we already have a suitable docker image; build one if not.
    # This generates a SHA for the docker directory and uses this as a tag to identify the required docker image.
    directory_sha = get_directory_sha(DOCKER_DIRECTORY)
    image_tag = f"{DOCKER_IMAGE_NAME}:{directory_sha}"
    images = subprocess.check_output(["docker", "images", "-q", image_tag]).decode("utf-8").strip().split("\n")
    images = [image for image in images if image]
    if not images:
        logging.info("Building docker container...")
        quiet = [] if verbose else ["--quiet"]
        subprocess.check_call(["docker", "build",
                               "-t", image_tag,
                               "-f", DOCKERFILE] +
                              quiet +
                              [ROOT])

    # Iterate over the arguments determining which ones map to files or directories on the file system.
    # These will be mounted as volumes when running Docker Compose to ensure the instance of incontext running
    # in the container has access to the necessary files.
    # Passing a path on the command line is treated as granting implicit permission to the container.
    cwd = os.getcwd()
    volumes = []
    for volume in unique_prefixes(filter_paths(args) + [cwd] + [ROOT]):  # N.B. The current working directory is an implicit mount.
        volumes.extend(["--volume", f"{volume}:{volume}"])

    # Construct the command.
    command = (["docker", "run",
                "--user", f"{os.getuid()}:{os.getgid()}",
                "--workdir", cwd] +
               volumes +
               [image_tag, "python3", "-u", os.path.join(ROOT, "incontext.py")] +
               args)

    # Run incontext in docker.
    logging.debug("Running command %s.", command)
    result = subprocess.run(command)
    sys.exit(result.returncode)


if __name__ == "__main__":
    main()
